Program for stack implementation and operations.
#include <stdio.h>
int MAXSIZE = 8; 
int stack[8]; 
int top = -1; 
int isempty() {
 if(top == -1)
 return 1;
 else
 return 0;
}
 
int isfull() {
 if(top == MAXSIZE)
 return 1;
 else
 return 0;
}
int peek() {
 return stack[top];
}
int pop() {
 int data;
 if(!isempty()) {
 data = stack[top];
 top = top - 1; 
 return data;
 } else {
 printf("Could not retrieve data, Stack is empty.\n");
 }
}
int push(int data) {
 if(!isfull()) {
 top = top + 1; 
 stack[top] = data;
 } else {
 printf("Could not insert data, Stack is full.\n");
 }
}
int main() {
 // push items on to the stack 
 push(3);
 push(5);
 push(9);
 push(1);
 push(12);
 push(15);
 printf("Element at top of the stack: %d\n" ,peek());
 printf("Elements: \n");
 // print stack data 
 while(!isempty()) {
 int data = pop();
 printf("%d\n",data);
 }
 return 0;
}
Program to show traversing of array.
#include <stdio.h>
main() {
 int LA[] = {1,3,5,7,8};
 int item = 10, k = 3, n = 5;
 int i = 0, j = n; 
 printf("The original array elements are :\n");
 for(i = 0; i<n; i++) {
 printf("LA[%d] = %d \n", i, LA[i]);
 }
}
